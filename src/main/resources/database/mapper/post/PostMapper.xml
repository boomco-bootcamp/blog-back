<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lecture.blog.biz.service.post.repo.PostRepository">

    <!--    블로그 게시글 목록 조회 -->
    <select id="selectPostInfoList" parameterType="PostReqVO" resultType="PostResVO">
        SELECT
            bp.blog_post_id,
            bp.blog_id,
            bp.blog_post_cat_id,
            bp.blog_post_title,
            bp.blog_post_con,
            bp.del_yn,
            bp.rgsn_user_id,
            RGSN.user_nm AS rgsn_user_nm,
            bp.rgsn_ts,
            bp.amnn_user_id,
            AMNN.user_nm AS amnn_user_nm,
            bp.amnn_ts,
            coalesce(bpv.blog_post_views_cnt, 0) AS post_views_cnt,
            coalesce(bpc.blog_post_comment_cnt, 0) AS post_comment_cnt,
            coalesce(bpl.blog_post_like_cnt, 0) AS post_like_cnt,
            bpci.blog_post_cat_nm,
            bi.user_id,
            bi.blog_nm,
            U.user_nm AS blog_user_nm

        FROM blog_post_l bp

        /* 게시글 카테고리 정보 */
        LEFT JOIN blog_post_cat_info_m bpci ON bpci.blog_post_cat_id = bp.blog_post_cat_id AND bpci.del_yn = 'N'

        /* 게시글 방문자 수 */
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_views_cnt FROM blog_post_views_l GROUP BY blog_post_id
        ) bpv ON bpv.blog_post_id = bp.blog_post_id

        /* 게시글 댓글 수*/
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_comment_cnt FROM blog_post_comment_l GROUP BY blog_post_id
        ) bpc ON bpc.blog_post_id = bp.blog_post_id

        /* 게시글 좋아요 수*/
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_like_cnt FROM blog_post_like_l GROUP BY blog_post_id
        ) bpl ON bpl.blog_post_id = bp.blog_post_id


        /* 게시글 태그 목록 */
        LEFT JOIN (
            SELECT blog_post_id
            FROM blog_post_tag_l
            WHERE 1 = 1
            AND UPPER(blog_tag_con) LIKE '%' || UPPER(#{searchCon}) || '%'
            GROUP BY blog_post_id
        )  btl ON btl.blog_post_id = bp.blog_post_id

        /* 등록/수정 사용자 정보 */
        LEFT JOIN blog_user_info_m RGSN ON RGSN.user_id = bp.rgsn_user_id
        LEFT JOIN blog_user_info_m AMNN ON AMNN.user_id = bp.amnn_user_id

        /* 블로그 정보 */
        LEFT JOIN blog_info_m bi ON bi.blog_id = bp.blog_id

        /* 블로그 게시글 작성자 정보 */
        LEFT JOIN blog_user_info_m U ON U.user_id = bi.user_id

        WHERE 1 = 1
        AND bp.del_yn ='N'

        <if test="blogPostCatId != null and !blogPostCatId.equals('')">
            AND bp.blog_post_cat_id = #{blogPostCatId}
        </if>

        <if test="searchCon != null and !searchCon.equals('')">
            AND (
                    UPPER(bp.blog_post_title) LIKE '%' || UPPER(#{searchCon}) || '%'
                    OR
                    btl.blog_post_id IS NOT NULL
            )
        </if>

        LIMIT #{record} OFFSET (#{page} - 1)
    </select>

    <!--    게시글 정보 목록 총 카운트 -->
    <select id="selectPostInfoTotal" parameterType="PostReqVO" resultType="int">
        SELECT COUNT(0)

        FROM blog_post_l bp

        <if test="searchCon != null and !searchCon.equals('')">
            /* 게시글 태그 목록 */
            LEFT JOIN (
            SELECT blog_post_id
            FROM blog_post_tag_l
            WHERE 1 = 1
            AND UPPER(blog_tag_con) LIKE '%' || UPPER(#{searchCon}) || '%'
            GROUP BY blog_post_id
            )  btl ON btl.blog_post_id = bp.blog_post_id
        </if>

        WHERE 1 = 1 AND bp.del_yn ='N'

        <if test="blogPostCatId != null and !blogPostCatId.equals('')">
            AND bp.blog_post_cat_id = #{blogPostCatId}
        </if>

        <if test="searchCon != null and !searchCon.equals('')">
            AND (
                    UPPER(bp.blog_post_title) LIKE '%' || UPPER(#{searchCon}) || '%'
                    OR
                    btl.blog_post_id IS NOT NULL
            )
        </if>

    </select>

    <!--    게시글 상세 정보 조회    -->
    <select id="selectPostInfo" parameterType="string" resultType="PostResVO">
        SELECT
            A.blog_post_id
            /* 이전 글 ID - 정렬 조건 : 글 등록 순 */
            , (
                SELECT previous_blog_post_id
                FROM (SELECT blog_post_id, LAG(blog_post_id) OVER (ORDER BY rgsn_ts DESC) AS previous_blog_post_id FROM blog_post_l)
                WHERE blog_post_id = A.blog_post_id
            ) AS previous_blog_post_id
            /* 다음 글 ID - 정렬 조건 : 글 등록 순 */
            , (
                SELECT next_blog_post_id
                FROM (SELECT blog_post_id, LEAD(blog_post_id) OVER (ORDER BY rgsn_ts DESC) AS next_blog_post_id FROM blog_post_l)
                WHERE blog_post_id = A.blog_post_id
            ) AS next_blog_post_id

             , A.blog_id
             , A.blog_post_title
             , A.blog_post_con

             , A.blog_post_cat_id
             , B.blog_post_cat_nm

             , A.del_yn
             , A.rgsn_user_id
             , RGSN.user_nm AS rgsn_user_nm
             , A.rgsn_ts
             , A.amnn_user_id
             , AMNN.user_nm AS amnn_user_nm
             , A.amnn_ts
             , F.user_id
             , F.blog_nm
             , G.user_nm AS blog_user_nm
             , coalesce(C.blog_post_views_cnt, 0) AS post_views_cnt
             , coalesce(D.blog_post_comment_cnt, 0) AS post_comment_cnt
             , coalesce(E.blog_post_like_cnt, 0) AS post_like_cnt

        FROM blog_post_l A

        /* 게시글 카테고리 정보 */
        LEFT JOIN blog_post_cat_info_m B ON B.blog_post_cat_id = A.blog_post_cat_id AND B.del_yn = 'N'

        /* 게시글 방문자 수 */
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_views_cnt FROM blog_post_views_l GROUP BY blog_post_id
        ) C ON C.blog_post_id = A.blog_post_id

            /* 게시글 댓글 수*/
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_comment_cnt FROM blog_post_comment_l GROUP BY blog_post_id
        ) D ON D.blog_post_id = A.blog_post_id

        /* 게시글 좋아요 수*/
        LEFT JOIN (
            SELECT blog_post_id, COUNT(0) AS blog_post_like_cnt FROM blog_post_like_l GROUP BY blog_post_id
        ) E ON E.blog_post_id = A.blog_post_id

        /* 등록/수정 사용자 정보 */
        LEFT JOIN blog_user_info_m RGSN ON RGSN.user_id = A.rgsn_user_id
        LEFT JOIN blog_user_info_m AMNN ON AMNN.user_id = A.amnn_user_id

        /* 블로그 정보 */
        LEFT JOIN blog_info_m F ON F.blog_id = A.blog_id

        /* 블로그 게시글 작성자 정보 */
        LEFT JOIN blog_user_info_m G ON G.user_id = F.user_id


        WHERE 1 = 1
          AND A.del_yn ='N'
          AND A.blog_post_id = #{blogPostId}
    </select>

    <!--    게시글 정보 작성   -->
    <insert id="insertPostInfo" parameterType="PostSaveReqVO">
        INSERT INTO blog_post_l
        (
          blog_post_id
        , blog_id
        , blog_post_title
        , blog_post_con
        , blog_post_cat_id
        , del_yn
        , rgsn_user_id
        , rgsn_ts
        , amnn_user_id
        , amnn_ts
        )
        VALUES
            (
              #{blogPostId}
            , (SELECT A.blog_id
               FROM blog_info_m A
               WHERE A.rgsn_user_id = #{rgsnUserId})
            , #{blogPostTitle}
            , #{blogPostCon}
            , #{blogPostCatId}
            , 'N'
            , #{rgsnUserId}
            , CURRENT_TIMESTAMP
            , #{amnnUserId}
            , CURRENT_TIMESTAMP
            )
    </insert>

    <!--    게시글 정보 수정   -->
    <update id="updatePostInfo" parameterType="PostSaveReqVO">
        UPDATE
            blog_post_l
        SET
            blog_post_title       = #{blogPostTitle}
          , blog_post_con      = #{blogPostCon}
          , blog_post_cat_id   = #{blogPostCatId}
          , amnn_user_id  = #{amnnUserId}
          , amnn_ts       = CURRENT_TIMESTAMP
        WHERE blog_post_id = #{blogPostId}
    </update>

    <!--    게시글 정보 삭제   -->
    <update id="deletePostInfo" parameterType="PostSaveReqVO">
        UPDATE
            blog_post_l
        SET
            del_yn = 'Y'
          , amnn_user_id = #{amnnUserId}
          , amnn_ts = CURRENT_TIMESTAMP
        WHERE 1 = 1
          AND blog_post_id = #{blogPostId}
    </update>

</mapper>